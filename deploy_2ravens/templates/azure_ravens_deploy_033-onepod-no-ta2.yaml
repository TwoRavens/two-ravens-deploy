---
# -------------------------------------
#   TA3 Service
#   https://2ravens.org
#   template: {{ template_name }}
# -------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: ravensvc{{ serviceNameSuffix}}
  labels:
    app: ta3{{ serviceNameSuffix}}
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-raven
spec:
  type: LoadBalancer
  # loadBalancerIP: {{ loadBalancerIP }}
  # loadBalancerIP: 104.197.235.238  # 2ravens.org
  selector:
    app: ta3{{ serviceNameSuffix}}
  ports:
    - name: http
      port: {{ externalPort }}
      protocol: TCP
      targetPort: 80
---
# -------------------------------------
#   TA3 Pod
# -------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: ravenpod{{ serviceNameSuffix}}
  labels:
    app: ta3{{ serviceNameSuffix}}
spec:
  restartPolicy: Never
  containers:
  # -------------------------
  # 1 of 7: Ravens postgres
  # -------------------------
  - name: ravens-postgres
    image: postgres:12
    imagePullPolicy: Always
{{ postgres_resources }}
    env:
      - name: POSTGRES_DB
        value: raven_1
      - name: POSTGRES_USER
        value: raven_user
      - name: POSTGRES_PASSWORD
        value: ephemeral_data
  # -------------------------
  # 2 of 7: Ravens nginx
  # -------------------------
  - name: ravens-nginx
    image: {{ tworavens_registry }}/ravens-nginx:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_nginx }}
{{ nginx_resources }}
    ports:
      - containerPort: 80
        name: http
        protocol: TCP
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
    volumeMounts:
{{ shared_volume_mounts }}
  # -------------------------
  # 3 of 7: redis
  # -------------------------
  - name: redis
    image: redis:6
{{ redis_resources }}
    ports:
    - containerPort: 6379
    volumeMounts:
      # "backdoor": For viewing outer directories
      - name: ravens-volume
        mountPath: /ravens_volume
        readOnly: false
  # -------------------------
  # 4 of 7: TA3 main (web app)
  # -------------------------
  - name: ta3-main
    image: {{ tworavens_registry }}/ravens-main:{{ tworavens_container_tag }}
    #image: tworavens/ravens-main:develop
    imagePullPolicy: {{ pull_policy_ravens_main }}
    command: ["d3m_start_multiuser.sh"]
{{ ta3_resources }}
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
{{ shared_volume_mounts }}
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    env:
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      - name: MAPBOX_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: MAPBOX_ACCESS_TOKEN
      - name: MONGO_CONNECTION_STRING
        value: "mongodb://localhost:27017"
      #- name: MONGO_CONNECTION_STRING
      #  valueFrom:
      #    secretKeyRef:
      #      name: tworavens-web-secrets
      #      key: MONGO_CONNECTION_STRING
      - name: D3MCPU
        value: "1"
      - name: D3MRAM
        value: "1Gi"
  # -------------------------
  # 5 of 7: celery worker
  # -------------------------
  - name: celery-worker
    image: {{ tworavens_registry }}/ravens-main:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_ravens_main }}
    command: ['celery', '-A', 'tworavensproject', 'worker', '-l', 'info']
    # command: ['celery', '-A', 'tworavensproject', 'worker', '--concurrency=7', '-l', 'info']
{{ celery_resources }}
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
{{ shared_volume_mounts }}
    # ---------------------------------
    # environment variables passed to container
    # ---------------------------------
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    env:
      - name: MONGO_CONNECTION_STRING
        value: "mongodb://localhost:27017"
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      - name: MAPBOX_ACCESS_TOKEN
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: MAPBOX_ACCESS_TOKEN
      #- name: MONGO_CONNECTION_STRING
      #  valueFrom:
      #    secretKeyRef:
      #      name: tworavens-web-secrets
      #      key: MONGO_CONNECTION_STRING
  # -------------------------
  # 6 of 7: mongo
  # -------------------------
  - name: mongo-2ravens
    image: mongo:4.4.6
{{ mongo_resources }}
    ports:
      - containerPort: 27017
        protocol: TCP
    volumeMounts:
{{ shared_volume_mounts }}
  # -------------------------
  # 7 of 7: rook
  # -------------------------
  - name: rook-service
    image: {{ tworavens_registry }}/ravens-r-service:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_rook }}
{{ rook_resources }}
    volumeMounts:
{{ shared_volume_mounts }}
    ports:
      - containerPort: 8000
        name: http
        protocol: TCP
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
  # ----------------------------
  # Secrets
  # ----------------------------
  imagePullSecrets:
    - name: secret-raven-registry
  # ----------------------------
  # Volumes
  # ----------------------------
  volumes:
    - name: ravens-volume
      #persistentVolumeClaim:
      #  claimName: raven-pvc-1
      #  readOnly: false
      emptyDir: {}
    # ----------------------------
    # Volumes for jump server data
    # ----------------------------
    #- name: input-data
    #  emptyDir: {}
    #  #hostPath:
    #    #path: {{ eval_dataset_path }}
    #    #type: Directory
    #- name: static-data
    #  emptyDir: {}
    #  #hostPath:
    #    #path: {{ static_dataset_path }}
    #    #type: Directory
    #- name: output-data
    #  emptyDir: {}
---
# ---------------------------------------
# TA3 configmap used by:
#   main (TA3), rook-service, celery-worker,
# ---------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: ravens-django-config{{ serviceNameSuffix}}
data:
  SORT_BY_GATES_DATASETS: "True"
  DJANGO_SETTINGS_MODULE: "{{ DJANGO_SETTINGS_MODULE }}"
  LOCAL_SETUP_DIR: /ravens_volume/2ravens_local_setup
  #
  RAVENS_SERVER_NAME: "{{ RAVENS_SERVER_NAME}}"
  SESSION_COOKIE_NAME: "{{ SESSION_COOKIE_NAME}}"
  CSRF_COOKIE_NAME: "{{ CSRF_COOKIE_NAME}}"
  # When TA2_STATIC_TEST_MODE is set to True, TA2 is ignored
  TA2_STATIC_TEST_MODE: "False"
  #
  DEBUG: "False"
  DISPLAY_DATAMART_UI: "True"
  #
  #
  # Example of setting test datasets via an env varaible
  #TEST_DATASETS: "185_baseball 196_autoMpg TR81_Ethiopia_phemyear TR82_Ethiopia_phemlarge TR83_Ethiopia_gdl_sub TR84_Ethiopia_zone_mon"
  #
  # Reference to the gRPC server using the pod name and TA2 port
  TA2_D3M_SOLVER_ENABLED: "{{ TA2_D3M_SOLVER_ENABLED }}"
  TA2_WRAPPED_SOLVERS: "{{ TA2_WRAPPED_SOLVERS }}"
  #
  # TA2/TA3 in one pod
  TA2_TEST_SERVER_URL: "ravenpod{{ serviceNameSuffix}}:45042"
  #
  # TA2/TA3 in separate pods
  #TA2_TEST_SERVER_URL: "ta2-service{{ serviceNameSuffix}}:45042"
  #
  # Url to TA3 R/rook web service
  R_DEV_SERVER_BASE: "http://localhost:8000/"
  #
  # Redis
  REDIS_HOST: localhost
  #
  # valid values: "ws://" and  "wss://"
  WEBSOCKET_PREFIX: "ws://"
  #
  # Mongo db name; Mongo creds are in secrets
  TWORAVENS_MONGO_DB_NAME: "harvard"
  #
  # Only used by rook--and redundant as also set to "yes" in Dockerfile
  ROOK_USE_PRODUCTION_MODE: "yes"
  #
  #
  # Postgres credentials
  #
  DB_ENGINE: "django.db.backends.postgresql"
  DB_NAME: "raven_1"
  DB_USER: "raven_user"
  DB_PASSWORD: "ephemeral_data"
  DB_HOST: "localhost"
  DB_PORT: "5432"
  #
  # NGINX variables
  #
  NGINX_SERVER_NAME: "{{ NGINX_SERVER_NAME }}"
  #
  #  Example for 30Mb: NGINX_MAX_UPLOAD_SIZE: "30M"
  NGINX_MAX_UPLOAD_SIZE: "{{ NGINX_MAX_UPLOAD_SIZE }}"
  #
  #  Example for 30Mb, 1024^2 * 30: DATA_UPLOAD_MAX_MEMORY_SIZE: "31457280"
  DATA_UPLOAD_MAX_MEMORY_SIZE: "{{ DATA_UPLOAD_MAX_MEMORY_SIZE }}"
---
# ---------------------------------------
# D3M Configmap used by:
#   ravens-main (TA3), rook-service, celery-worker, TA2
# ---------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: ravens-config-d3m{{ serviceNameSuffix}}
data:
  D3MRUN: "{{ D3MRUN }}"
  D3MINPUTDIR: "{{ D3MINPUTDIR }}"
  D3MOUTPUTDIR: "{{ D3MOUTPUTDIR }}"
  D3MSTATICDIR: "{{ D3MSTATICDIR }}"
  D3MPROBLEMPATH: "{{ D3MPROBLEMPATH }}"
  D3MLOCALDIR: "{{ D3MLOCALDIR }}"
  # Used by TA2
  #D3MCPU: "{{ D3MCPU }}"
  #D3MRAM: "{{ D3MRAM }}"
  #
  D3MTIMEOUT: "600"
  D3MCONTEXT: "TESTING"
  #
  DATAMART_URL_NYU: "{{ DATAMART_URL_NYU }}"
  DATAMART_URL_ISI: "{{ DATAMART_URL_ISI }}"
---
